# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

variables:
    PYTHONUNBUFFERED: "1"

before_script:
  - pip install tox

stages: [precheck, test, deploy]

prechecks:
  tags: [ci.inria.fr, small]
  stage: precheck
  script:
  - pip install pre-commit
  - pre-commit run --all-files

pep8:
  tags: [ci.inria.fr, small]
  stage: test
  script:
  - tox -e pep8

docs:
  tags: [ci.inria.fr, small]
  stage: test
  script:
  - tox -e docs

py39-functionnal-1.2.1:
    tags: [ci.inria.fr, large]
    stage: test
    image: python:3.9
    variables:
      TOXENV: py39
    script:
    # Install docker programs (docker-cli, docker-compose)
    - apt update
    - apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - apt-key fingerprint 0EBFCD88
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - apt update
    - apt install -y docker-ce-cli
    - pip install --upgrade pip setuptools wheel
    - pip install docker-compose
    #  Install sharelatex
    - cd sharelatex/tests/1.2.1
    - docker-compose up -d
    # Prepare the the functionnal tests
    # -create an user
    # -export the env variables needed by the tests
    - docker cp CreateUserTest.coffee sharelatex:/var/www/sharelatex/tasks/CreateUserTest.coffee
    - docker exec --workdir /var/www/sharelatex -i sharelatex grunt user:test --email=joe@inria.fr
    - export CI_BASE_URL=http://172.17.0.1:8080
    - export CI_USERNAMES=joe@inria.fr
    - export CI_PASSWORDS=TestTest42
    - export CI_AUTH_TYPE=legacy

    # let's test !
    - tox




#######################################################################################
#
# Functionnal tests:
#   - We boot a fresh instance of sharelatex and run test against it
#   - Test locally:
#     gitlab-runner exec docker \
#      --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
#      functionnal
#
#######################################################################################
py36-functionnal: &base-functionnal
  tags: [ci.inria.fr, large]
  stage: test
  image: python:3.6
  variables:
    TOXENV: py36
  script:
  # Install docker programs (docker-cli, docker-compose)
  - env
  - apt update
  - apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
  - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
  - apt-key fingerprint 0EBFCD88
  - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
  - apt update
  - apt install -y docker-ce-cli  docker-compose-plugin  #  Install sharelatex
  - cd sharelatex/tests
  - docker compose up -d
  # Prepare the the functionnal tests
  # -create an user
  # -export the env variables needed by the tests
  - docker cp create-user-with-pass.js  sharelatex:/var/www/sharelatex/web/modules/server-ce-scripts/scripts
  # user creation isn't idempotent
  - docker exec --workdir /var/www/sharelatex/web/modules/server-ce-scripts/scripts -i sharelatex node create-user-with-pass.js --email=joe1@inria.fr --pass=TestTest42
  - docker exec --workdir /var/www/sharelatex/web/modules/server-ce-scripts/scripts -i sharelatex node create-user-with-pass.js --email=joe2@inria.fr --pass=TestTest42
  - docker exec --workdir /var/www/sharelatex/web/modules/server-ce-scripts/scripts -i sharelatex node create-user-with-pass.js --email=joe3@inria.fr --pass=TestTest42
  - export CI_BASE_URL=http://172.17.0.1:8080
  - export CI_USERNAMES=joe1@inria.fr,joe2@inria.fr,joe3@inria.fr
  - export CI_PASSWORDS=TestTest42,TestTest42,TestTest42
  - export CI_AUTH_TYPE=community
  # let's test !
  # the python interpreter version is taken from the TOXENV var
  - tox

py37-functionnal:
  <<: *base-functionnal
  stage: test
  image: python:3.7
  variables:
    TOXENV: py37

py38-functionnal:
  <<: *base-functionnal
  stage: test
  image: python:3.8
  variables:
    TOXENV: py38
  allow_failure: true

py39-functionnal:
  <<: *base-functionnal
  stage: test
  image: python:3.9
  variables:
    TOXENV: py39
  allow_failure: true


py310-functionnal:
  <<: *base-functionnal
  stage: test
  image: python:3.10
  variables:
    TOXENV: py310
  allow_failure: true

########################################################################################
#
# Release zone:
#   - Create the wheel
#   - push it on pypi
#   - build and publish the doc
#
##########################################################################################
pages:
    stage: deploy
    tags: [ci.inria.fr, small]
    only:
    - tags
    script:
    - tox -e docs
    - mkdir -p public/
    - cp -r docs/_build/html/* public/
    artifacts:
      paths:
      - public

pypi:
    stage: deploy
    tags: [ci.inria.fr, small]
    only:
    - tags
    script:
    - python setup.py bdist_wheel
    - pip install twine
    # credentials are set in the env by gitlab
    - twine upload dist/* --verbose
